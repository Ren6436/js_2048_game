{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/modules/Tile.js"],"sourcesContent":["const $a5fd07fa01589658$var$GRID_SIZE = 4;\nconst $a5fd07fa01589658$var$CELL_SIZE = 12;\nconst $a5fd07fa01589658$var$CELL_GAP = 2;\nclass $a5fd07fa01589658$export$2e2bcd8739ae039 {\n    #cells;\n    constructor(gridElement){\n        gridElement.style.setProperty(\"--grid-size\", $a5fd07fa01589658$var$GRID_SIZE);\n        gridElement.style.setProperty(\"--cell-size\", `${$a5fd07fa01589658$var$CELL_SIZE}vmin`);\n        gridElement.style.setProperty(\"--cell-gap\", `${$a5fd07fa01589658$var$CELL_GAP}vmin`);\n        this.#cells = $a5fd07fa01589658$var$createCellElements(gridElement).map((cellElement, index)=>{\n            return new $a5fd07fa01589658$var$Cell(cellElement, index % $a5fd07fa01589658$var$GRID_SIZE, Math.floor(index / $a5fd07fa01589658$var$GRID_SIZE));\n        });\n    }\n    get cells() {\n        return this.#cells;\n    }\n    get cellsByColumn() {\n        return this.#cells.reduce((cellGrid, cell)=>{\n            cellGrid[cell.x] = cellGrid[cell.x] || [];\n            cellGrid[cell.x][cell.y] = cell;\n            return cellGrid;\n        }, []);\n    }\n    get cellsByRow() {\n        return this.#cells.reduce((cellGrid, cell)=>{\n            cellGrid[cell.y] = cellGrid[cell.y] || [];\n            cellGrid[cell.y][cell.x] = cell;\n            return cellGrid;\n        }, []);\n    }\n    get #emptyCells() {\n        return this.#cells.filter((cell)=>cell.tile == null);\n    }\n    randomEmptyCell() {\n        const randomIndex = Math.floor(Math.random() * this.#emptyCells.length);\n        return this.#emptyCells[randomIndex];\n    }\n}\nclass $a5fd07fa01589658$var$Cell {\n    #cellElement;\n    #x;\n    #y;\n    #tile;\n    #mergeTile;\n    constructor(cellElement, x, y){\n        this.#cellElement = cellElement;\n        this.#x = x;\n        this.#y = y;\n    }\n    get x() {\n        return this.#x;\n    }\n    get y() {\n        return this.#y;\n    }\n    get tile() {\n        return this.#tile;\n    }\n    set tile(value) {\n        this.#tile = value;\n        if (value == null) return;\n        this.#tile.x = this.#x;\n        this.#tile.y = this.#y;\n    }\n    get mergeTile() {\n        return this.#mergeTile;\n    }\n    set mergeTile(value) {\n        this.#mergeTile = value;\n        if (value == null) return;\n        this.#mergeTile.x = this.#x;\n        this.#mergeTile.y = this.#y;\n    }\n    canAccept(tile) {\n        return this.tile == null || this.mergeTile == null && this.tile.value === tile.value;\n    }\n    mergeTiles() {\n        if (this.tile == null || this.mergeTile == null) return;\n        this.tile.value = this.tile.value + this.mergeTile.value;\n        this.mergeTile.remove();\n        this.mergeTile = null;\n    }\n}\nfunction $a5fd07fa01589658$var$createCellElements(gridElement) {\n    const cells = [];\n    for(let i = 0; i < $a5fd07fa01589658$var$GRID_SIZE * $a5fd07fa01589658$var$GRID_SIZE; i++){\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"cell\");\n        cells.push(cell);\n        gridElement.append(cell);\n    }\n    return cells;\n}\n\n\nclass $296a42d4036cf796$export$2e2bcd8739ae039 {\n    #tileElement;\n    #x;\n    #y;\n    #value;\n    constructor(tileContainer, value = Math.random() > 0.5 ? 2 : 4){\n        this.#tileElement = document.createElement(\"div\");\n        this.#tileElement.classList.add(\"tile\");\n        tileContainer.append(this.#tileElement);\n        this.value = value;\n    }\n    get value() {\n        return this.#value;\n    }\n    set value(v) {\n        this.#value = v;\n        this.#tileElement.textContent = v;\n        const power = Math.log2(v);\n        const backgroundLightness = 100 - power * 9;\n        this.#tileElement.style.setProperty(\"--background-lightness\", `${backgroundLightness}%`);\n        this.#tileElement.style.setProperty(\"--text-lightness\", `${backgroundLightness <= 50 ? 90 : 10}%`);\n    }\n    set x(value) {\n        this.#x = value;\n        this.#tileElement.style.setProperty(\"--x\", value);\n    }\n    set y(value) {\n        this.#y = value;\n        this.#tileElement.style.setProperty(\"--y\", value);\n    }\n    remove() {\n        this.#tileElement.remove();\n    }\n    waitForTransition(animation = false) {\n        return new Promise((resolve)=>{\n            this.#tileElement.addEventListener(animation ? \"animationend\" : \"transitionend\", resolve, {\n                once: true\n            });\n        });\n    }\n}\n\n\nconst $09e991522ca7e64e$var$gameBoard = document.getElementById(\"game-board\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$scoreField = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$bestField = document.querySelector(\".game-best\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$endMessage = document.querySelector(\".message-end\");\nlet $09e991522ca7e64e$var$grid = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)($09e991522ca7e64e$var$gameBoard);\nlet $09e991522ca7e64e$var$score = 0;\nlet $09e991522ca7e64e$var$currentScore = 0;\nlet $09e991522ca7e64e$var$bestScore = $09e991522ca7e64e$var$getBestScore();\n$09e991522ca7e64e$var$bestField.textContent = $09e991522ca7e64e$var$bestScore;\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$loadGame);\nfunction $09e991522ca7e64e$var$loadGame() {\n    while($09e991522ca7e64e$var$gameBoard.firstChild)$09e991522ca7e64e$var$gameBoard.removeChild($09e991522ca7e64e$var$gameBoard.firstChild);\n    $09e991522ca7e64e$var$grid = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)($09e991522ca7e64e$var$gameBoard);\n    $09e991522ca7e64e$var$grid.randomEmptyCell().tile = new (0, $296a42d4036cf796$export$2e2bcd8739ae039)($09e991522ca7e64e$var$gameBoard);\n    $09e991522ca7e64e$var$grid.randomEmptyCell().tile = new (0, $296a42d4036cf796$export$2e2bcd8739ae039)($09e991522ca7e64e$var$gameBoard);\n    $09e991522ca7e64e$var$score = 0;\n    $09e991522ca7e64e$var$scoreField.textContent = $09e991522ca7e64e$var$score;\n    $09e991522ca7e64e$var$button.classList.replace(\"start\", \"restart\");\n    $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$endMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$button.blur();\n    $09e991522ca7e64e$var$setupInput();\n}\nfunction $09e991522ca7e64e$var$getBestScore() {\n    return +localStorage.getItem(\"bestScore\") || 0;\n}\nfunction $09e991522ca7e64e$var$setupInput() {\n    window.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleInput, {\n        once: true\n    });\n}\nasync function $09e991522ca7e64e$var$handleInput(e) {\n    switch(e.key){\n        case \"ArrowUp\":\n            if (!$09e991522ca7e64e$var$canMoveUp()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveUp();\n            break;\n        case \"ArrowDown\":\n            if (!$09e991522ca7e64e$var$canMoveDown()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveDown();\n            break;\n        case \"ArrowLeft\":\n            if (!$09e991522ca7e64e$var$canMoveLeft()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveLeft();\n            break;\n        case \"ArrowRight\":\n            if (!$09e991522ca7e64e$var$canMoveRight()) {\n                $09e991522ca7e64e$var$setupInput();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveRight();\n            break;\n        default:\n            $09e991522ca7e64e$var$setupInput();\n            return;\n    }\n    $09e991522ca7e64e$var$grid.cells.forEach((cell)=>cell.mergeTiles());\n    const newTile = new (0, $296a42d4036cf796$export$2e2bcd8739ae039)($09e991522ca7e64e$var$gameBoard);\n    $09e991522ca7e64e$var$grid.randomEmptyCell().tile = newTile;\n    if (!$09e991522ca7e64e$var$canMoveUp() && !$09e991522ca7e64e$var$canMoveDown() && !$09e991522ca7e64e$var$canMoveLeft() && !$09e991522ca7e64e$var$canMoveRight()) {\n        if (!$09e991522ca7e64e$var$winMessage.classList.contains(\"hidden\")) {\n            $09e991522ca7e64e$var$endMessage.classList.remove(\"hidden\");\n            return;\n        }\n        $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n        return;\n    }\n    $09e991522ca7e64e$var$setupInput();\n}\nfunction $09e991522ca7e64e$var$moveUp() {\n    return $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsByColumn);\n}\nfunction $09e991522ca7e64e$var$moveDown() {\n    return $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsByColumn.map((column)=>[\n            ...column\n        ].reverse()));\n}\nfunction $09e991522ca7e64e$var$moveLeft() {\n    return $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsByRow);\n}\nfunction $09e991522ca7e64e$var$moveRight() {\n    return $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsByRow.map((row)=>[\n            ...row\n        ].reverse()));\n}\nfunction $09e991522ca7e64e$var$slideTiles(cells) {\n    return Promise.all(cells.flatMap((group)=>{\n        const promises = [];\n        for(let i = 1; i < group.length; i++){\n            const cell = group[i];\n            if (cell.tile == null) continue;\n            let lastValidCell;\n            for(let j = i - 1; j >= 0; j--){\n                const moveToCell = group[j];\n                if (!moveToCell.canAccept(cell.tile)) break;\n                lastValidCell = moveToCell;\n            }\n            if (lastValidCell != null) {\n                promises.push(cell.tile.waitForTransition());\n                if (lastValidCell.tile != null) {\n                    lastValidCell.mergeTile = cell.tile;\n                    const mergeScore = lastValidCell.tile.value + cell.tile.value;\n                    $09e991522ca7e64e$var$currentScore += mergeScore;\n                    $09e991522ca7e64e$var$scoreField.textContent = $09e991522ca7e64e$var$currentScore;\n                    if ($09e991522ca7e64e$var$currentScore > $09e991522ca7e64e$var$bestScore) {\n                        $09e991522ca7e64e$var$bestScore = $09e991522ca7e64e$var$currentScore;\n                        localStorage.setItem(\"bestScore\", $09e991522ca7e64e$var$bestScore);\n                        $09e991522ca7e64e$var$bestField.textContent = $09e991522ca7e64e$var$bestScore;\n                    }\n                    // Перевірка на перемогу\n                    if (mergeScore === 2048) $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n                } else lastValidCell.tile = cell.tile;\n                cell.tile = null;\n            }\n        }\n        return promises;\n    }));\n}\nfunction $09e991522ca7e64e$var$canMoveUp() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsByColumn);\n}\nfunction $09e991522ca7e64e$var$canMoveDown() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsByColumn.map((column)=>[\n            ...column\n        ].reverse()));\n}\nfunction $09e991522ca7e64e$var$canMoveLeft() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsByRow);\n}\nfunction $09e991522ca7e64e$var$canMoveRight() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsByRow.map((row)=>[\n            ...row\n        ].reverse()));\n}\nfunction $09e991522ca7e64e$var$canMove(cells) {\n    return cells.some((group)=>{\n        return group.some((cell, index)=>{\n            if (index === 0) return false;\n            if (cell.tile == null) return false;\n            const moveToCell = group[index - 1];\n            return moveToCell.canAccept(cell.tile);\n        });\n    });\n}\n\n\n//# sourceMappingURL=index.4b8579e7.js.map\n","import Grid from '../modules/Game.class';\nimport Tile from '../modules/Tile';\n\nconst gameBoard = document.getElementById('game-board');\nconst button = document.querySelector('.button');\nconst scoreField = document.querySelector('.game-score');\nconst bestField = document.querySelector('.game-best');\n\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst endMessage = document.querySelector('.message-end');\n\nlet grid = new Grid(gameBoard);\nlet score = 0;\nlet currentScore = 0;\nlet bestScore = getBestScore();\n\nbestField.textContent = bestScore;\nbutton.addEventListener('click', loadGame);\n\nfunction loadGame() {\n  while (gameBoard.firstChild) {\n    gameBoard.removeChild(gameBoard.firstChild);\n  }\n\n  grid = new Grid(gameBoard);\n\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n\n  score = 0;\n  scoreField.textContent = score;\n  button.classList.replace('start', 'restart');\n  button.textContent = 'Restart';\n\n  startMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  endMessage.classList.add('hidden');\n  button.blur();\n\n  setupInput();\n}\n\nfunction getBestScore() {\n  return +localStorage.getItem('bestScore') || 0;\n}\n\nfunction setupInput() {\n  window.addEventListener('keydown', handleInput, { once: true });\n}\n\nasync function handleInput(e) {\n  switch (e.key) {\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        setupInput();\n\n        return;\n      }\n      await moveUp();\n      break;\n\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        setupInput();\n\n        return;\n      }\n      await moveDown();\n      break;\n\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        setupInput();\n\n        return;\n      }\n      await moveLeft();\n      break;\n\n    case 'ArrowRight':\n      if (!canMoveRight()) {\n        setupInput();\n\n        return;\n      }\n      await moveRight();\n      break;\n\n    default:\n      setupInput();\n\n      return;\n  }\n\n  grid.cells.forEach((cell) => cell.mergeTiles());\n\n  const newTile = new Tile(gameBoard);\n\n  grid.randomEmptyCell().tile = newTile;\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    if (!winMessage.classList.contains('hidden')) {\n      endMessage.classList.remove('hidden');\n\n      return;\n    }\n\n    loseMessage.classList.remove('hidden');\n\n    return;\n  }\n\n  setupInput();\n}\n\nfunction moveUp() {\n  return slideTiles(grid.cellsByColumn);\n}\n\nfunction moveDown() {\n  return slideTiles(grid.cellsByColumn.map((column) => [...column].reverse()));\n}\n\nfunction moveLeft() {\n  return slideTiles(grid.cellsByRow);\n}\n\nfunction moveRight() {\n  return slideTiles(grid.cellsByRow.map((row) => [...row].reverse()));\n}\n\nfunction slideTiles(cells) {\n  return Promise.all(\n    cells.flatMap((group) => {\n      const promises = [];\n\n      for (let i = 1; i < group.length; i++) {\n        const cell = group[i];\n\n        if (cell.tile == null) {\n          continue;\n        }\n\n        let lastValidCell;\n\n        for (let j = i - 1; j >= 0; j--) {\n          const moveToCell = group[j];\n\n          if (!moveToCell.canAccept(cell.tile)) {\n            break;\n          }\n\n          lastValidCell = moveToCell;\n        }\n\n        if (lastValidCell != null) {\n          promises.push(cell.tile.waitForTransition());\n\n          if (lastValidCell.tile != null) {\n            lastValidCell.mergeTile = cell.tile;\n\n            const mergeScore = lastValidCell.tile.value + cell.tile.value;\n\n            currentScore += mergeScore;\n\n            scoreField.textContent = currentScore;\n\n            if (currentScore > bestScore) {\n              bestScore = currentScore;\n              localStorage.setItem('bestScore', bestScore);\n              bestField.textContent = bestScore;\n            }\n\n            // Перевірка на перемогу\n            if (mergeScore === 2048) {\n              winMessage.classList.remove('hidden');\n            }\n          } else {\n            lastValidCell.tile = cell.tile;\n          }\n          cell.tile = null;\n        }\n      }\n\n      return promises;\n    }),\n  );\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsByColumn.map((column) => [...column].reverse()));\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsByRow.map((row) => [...row].reverse()));\n}\n\nfunction canMove(cells) {\n  return cells.some((group) => {\n    return group.some((cell, index) => {\n      if (index === 0) {\n        return false;\n      }\n\n      if (cell.tile == null) {\n        return false;\n      }\n\n      const moveToCell = group[index - 1];\n\n      return moveToCell.canAccept(cell.tile);\n    });\n  });\n}\n","const GRID_SIZE = 4;\nconst CELL_SIZE = 12;\nconst CELL_GAP = 2;\n\nexport default class Grid {\n  #cells;\n\n  constructor(gridElement) {\n    gridElement.style.setProperty('--grid-size', GRID_SIZE);\n    gridElement.style.setProperty('--cell-size', `${CELL_SIZE}vmin`);\n    gridElement.style.setProperty('--cell-gap', `${CELL_GAP}vmin`);\n\n    this.#cells = createCellElements(gridElement).map((cellElement, index) => {\n      return new Cell(\n        cellElement,\n        index % GRID_SIZE,\n        Math.floor(index / GRID_SIZE),\n      );\n    });\n  }\n\n  get cells() {\n    return this.#cells;\n  }\n\n  get cellsByColumn() {\n    return this.#cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.x] = cellGrid[cell.x] || [];\n      cellGrid[cell.x][cell.y] = cell;\n\n      return cellGrid;\n    }, []);\n  }\n\n  get cellsByRow() {\n    return this.#cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.y] = cellGrid[cell.y] || [];\n      cellGrid[cell.y][cell.x] = cell;\n\n      return cellGrid;\n    }, []);\n  }\n\n  get #emptyCells() {\n    return this.#cells.filter((cell) => cell.tile == null);\n  }\n\n  randomEmptyCell() {\n    const randomIndex = Math.floor(Math.random() * this.#emptyCells.length);\n\n    return this.#emptyCells[randomIndex];\n  }\n}\n\nclass Cell {\n  #cellElement;\n  #x;\n  #y;\n  #tile;\n  #mergeTile;\n\n  constructor(cellElement, x, y) {\n    this.#cellElement = cellElement;\n    this.#x = x;\n    this.#y = y;\n  }\n\n  get x() {\n    return this.#x;\n  }\n\n  get y() {\n    return this.#y;\n  }\n\n  get tile() {\n    return this.#tile;\n  }\n\n  set tile(value) {\n    this.#tile = value;\n\n    if (value == null) {\n      return;\n    }\n    this.#tile.x = this.#x;\n    this.#tile.y = this.#y;\n  }\n\n  get mergeTile() {\n    return this.#mergeTile;\n  }\n\n  set mergeTile(value) {\n    this.#mergeTile = value;\n\n    if (value == null) {\n      return;\n    }\n    this.#mergeTile.x = this.#x;\n    this.#mergeTile.y = this.#y;\n  }\n\n  canAccept(tile) {\n    return (\n      this.tile == null ||\n      (this.mergeTile == null && this.tile.value === tile.value)\n    );\n  }\n\n  mergeTiles() {\n    if (this.tile == null || this.mergeTile == null) {\n      return;\n    }\n    this.tile.value = this.tile.value + this.mergeTile.value;\n    this.mergeTile.remove();\n    this.mergeTile = null;\n  }\n}\n\nfunction createCellElements(gridElement) {\n  const cells = [];\n\n  for (let i = 0; i < GRID_SIZE * GRID_SIZE; i++) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('cell');\n    cells.push(cell);\n    gridElement.append(cell);\n  }\n\n  return cells;\n}\n","export default class Tile {\n  #tileElement;\n  #x;\n  #y;\n  #value;\n\n  constructor(tileContainer, value = Math.random() > 0.5 ? 2 : 4) {\n    this.#tileElement = document.createElement('div');\n    this.#tileElement.classList.add('tile');\n    tileContainer.append(this.#tileElement);\n    this.value = value;\n  }\n\n  get value() {\n    return this.#value;\n  }\n\n  set value(v) {\n    this.#value = v;\n    this.#tileElement.textContent = v;\n\n    const power = Math.log2(v);\n    const backgroundLightness = 100 - power * 9;\n\n    this.#tileElement.style.setProperty(\n      '--background-lightness',\n      `${backgroundLightness}%`,\n    );\n\n    this.#tileElement.style.setProperty(\n      '--text-lightness',\n      `${backgroundLightness <= 50 ? 90 : 10}%`,\n    );\n  }\n\n  set x(value) {\n    this.#x = value;\n    this.#tileElement.style.setProperty('--x', value);\n  }\n\n  set y(value) {\n    this.#y = value;\n    this.#tileElement.style.setProperty('--y', value);\n  }\n\n  remove() {\n    this.#tileElement.remove();\n  }\n\n  waitForTransition(animation = false) {\n    return new Promise((resolve) => {\n      this.#tileElement.addEventListener(\n        animation ? 'animationend' : 'transitionend',\n        resolve,\n        { once: true },\n      );\n    });\n  }\n}\n"],"names":["$a5fd07fa01589658$export$2e2bcd8739ae039","cells","constructor","gridElement","style","setProperty","$a5fd07fa01589658$var$createCellElements","i","$a5fd07fa01589658$var$GRID_SIZE","cell","document","createElement","classList","add","push","append","map","cellElement","index","$a5fd07fa01589658$var$Cell","Math","floor","cellsByColumn","reduce","cellGrid","x","y","cellsByRow","emptyCells","filter","tile","randomEmptyCell","randomIndex","random","length","mergeTile","value","canAccept","mergeTiles","remove","$296a42d4036cf796$export$2e2bcd8739ae039","tileElement","tileContainer","v","textContent","backgroundLightness","power","log2","waitForTransition","animation","Promise","resolve","addEventListener","once","$09e991522ca7e64e$var$gameBoard","getElementById","$09e991522ca7e64e$var$button","querySelector","$09e991522ca7e64e$var$scoreField","$09e991522ca7e64e$var$bestField","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$endMessage","$09e991522ca7e64e$var$grid","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$currentScore","$09e991522ca7e64e$var$bestScore","localStorage","getItem","$09e991522ca7e64e$var$setupInput","window","$09e991522ca7e64e$var$handleInput","e","key","$09e991522ca7e64e$var$canMoveUp","$09e991522ca7e64e$var$slideTiles","$09e991522ca7e64e$var$canMoveDown","column","reverse","$09e991522ca7e64e$var$canMoveLeft","$09e991522ca7e64e$var$canMoveRight","row","forEach","newTile","contains","all","flatMap","group","promises","lastValidCell","j","moveToCell","mergeScore","setItem","$09e991522ca7e64e$var$canMove","some","firstChild","removeChild","replace","blur"],"version":3,"file":"index.4b8579e7.js.map"}